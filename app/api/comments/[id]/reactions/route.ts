import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/app/lib/mongoDB';
import Comment from '@/models/Comment';
import Notification from '@/models/Notification';
import mongoose from 'mongoose';

export async function POST(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    await dbConnect();
    const { userId, emoji } = await request.json();

    if (!mongoose.Types.ObjectId.isValid(params.id) || !mongoose.Types.ObjectId.isValid(userId)) {
      return NextResponse.json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID' }, { status: 400 });
    }

    if (!emoji || typeof emoji !== 'string') {
      return NextResponse.json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è emoji' }, { status: 400 });
    }

    const allowedEmojis = ['ü§°', 'üëç', 'üëé', '‚ù§Ô∏è', 'üòÇ', 'üò¢', 'üòÆ', 'üò°', 'ü§Ø', 'ü§©', 'üëè', 'üôå', 'üî•', 'üéâ'];
    if (!allowedEmojis.includes(emoji)) {
      return NextResponse.json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π emoji' }, { status: 400 });
    }

    const authToken = request.headers.get('Authorization')?.replace('Bearer ', '');
    const headerUserId = request.headers.get('x-user-id');
    if (!authToken || !headerUserId || headerUserId !== userId) {
      return NextResponse.json({ error: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø' }, { status: 401 });
    }

    const comment = await Comment.findById(params.id).populate('userId', 'username');
    if (!comment) {
      return NextResponse.json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (!comment.reactions) comment.reactions = [];
    if (!comment.likes) comment.likes = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userCurrentReaction = comment.reactions.find((r) => r.users.includes(userId));
    let action = '';

    if (userCurrentReaction && userCurrentReaction.emoji === emoji) {
      // –£–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      comment.reactions = comment.reactions.filter((r) => !r.users.includes(userId));
      action = 'removed';
    } else {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      comment.reactions = comment.reactions.filter((r) => !r.users.includes(userId));

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
      const reactionIndex = comment.reactions.findIndex((r) => r.emoji === emoji);
      if (reactionIndex === -1) {
        comment.reactions.push({ emoji, users: [userId] });
      } else {
        comment.reactions[reactionIndex].users.push(userId);
      }
      action = 'reacted';

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
      if (!comment.likes.includes(userId)) {
        comment.likes.push(userId);
      }
    }

    await comment.save();

    if (action === 'reacted' && comment.userId._id.toString() !== userId) {
      await Notification.create({
        userId: comment.userId._id,
        type: 'comment_reaction',
        content: `–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—É—á–∏–ª —Ä–µ–∞–∫—Ü–∏—é ${emoji} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${headerUserId}`,
        relatedId: comment._id,
        relatedModel: 'Comment',
        senderId: userId,
      });
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    const updatedComment = await Comment.findById(params.id).populate('userId', 'username');
    return NextResponse.json(updatedComment, { status: 200 });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≤ POST /api/comments/[id]/reactions:', error);
    return NextResponse.json(
      { error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', stack: error.stack },
      { status: 500 }
    );
  }
}