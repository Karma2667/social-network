import { NextResponse } from 'next/server';
import dbConnect from '@/app/lib/mongoDB';
import Comment from '@/models/Comment';
import Notification from '@/models/Notification';
import mongoose from 'mongoose';

export async function POST(request: Request, { params }: { params: { id: string } }) {
  await dbConnect();
  const { userId, emoji } = await request.json();

  if (!mongoose.Types.ObjectId.isValid(params.id) || !mongoose.Types.ObjectId.isValid(userId)) {
    return NextResponse.json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID' }, { status: 400 });
  }

  if (!emoji || typeof emoji !== 'string') {
    return NextResponse.json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è emoji' }, { status: 400 });
  }

  const allowedEmojis = ['üëç', '‚ù§Ô∏è', 'üòÇ', 'üò¢', 'üòÆ'];
  if (!allowedEmojis.includes(emoji)) {
    return NextResponse.json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π emoji' }, { status: 400 });
  }

  const comment = await Comment.findById(params.id).populate('userId', 'username');
  if (!comment) {
    return NextResponse.json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
  }

  const reactionIndex = comment.reactions.findIndex((r: any) => r.emoji === emoji);
  let action = '';

  if (reactionIndex === -1) {
    comment.reactions.push({ emoji, users: [userId] });
    action = 'reacted';
  } else {
    const users = comment.reactions[reactionIndex].users;
    const userIndex = users.indexOf(userId);
    if (userIndex === -1) {
      users.push(userId);
      action = 'reacted';
    } else {
      users.splice(userIndex, 1);
      if (users.length === 0) {
        comment.reactions.splice(reactionIndex, 1);
      }
      action = 'unreacted';
    }
  }

  await comment.save();

  if (action === 'reacted' && comment.userId._id.toString() !== userId) {
    await Notification.create({
      userId: comment.userId._id,
      type: 'comment_reaction',
      content: `–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—É—á–∏–ª —Ä–µ–∞–∫—Ü–∏—é ${emoji} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
      relatedId: comment._id,
      relatedModel: 'Comment',
      senderId: userId,
    });
  }

  return NextResponse.json(comment);
}