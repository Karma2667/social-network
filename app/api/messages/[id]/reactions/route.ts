import { NextResponse } from "next/server";
import { connectToDB, mongoose } from "@/app/lib/mongoDB";
import Message from "@/models/Message";

interface Reaction {
  emoji: string;
  users: string[];
}

export async function POST(request: Request, { params }: { params: { id: string } }) {
  console.time(`POST /api/messages/${params.id}/reactions: Total`);
  try {
    await connectToDB();
    const headerUserId = request.headers.get("x-user-id");
    const { emoji } = await request.json();

    console.log(`POST /api/messages/${params.id}/reactions: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ`, { headerUserId, emoji });

    if (!mongoose.Types.ObjectId.isValid(params.id)) {
      console.log(`POST /api/messages/${params.id}/reactions: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π messageId`);
      return NextResponse.json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è" }, { status: 400 });
    }

    if (!headerUserId || !mongoose.Types.ObjectId.isValid(headerUserId)) {
      console.log(`POST /api/messages/${params.id}/reactions: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π x-user-id`);
      return NextResponse.json({ error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–π userId –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ" }, { status: 401 });
    }

    if (!emoji || typeof emoji !== "string") {
      console.log(`POST /api/messages/${params.id}/reactions: –¢—Ä–µ–±—É–µ—Ç—Å—è emoji`);
      return NextResponse.json({ error: "–¢—Ä–µ–±—É–µ—Ç—Å—è emoji" }, { status: 400 });
    }

    const allowedEmojis = ["ü§°", "üëç", "üëé", "‚ù§Ô∏è", "üòÇ", "üò¢", "üòÆ", "üò°", "ü§Ø", "ü§©", "üëè", "üôå", "üî•", "üéâ"];
    if (!allowedEmojis.includes(emoji)) {
      console.log(`POST /api/messages/${params.id}/reactions: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π emoji`, emoji);
      return NextResponse.json({ error: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π emoji" }, { status: 400 });
    }

    const message = await Message.findById(params.id);
    if (!message) {
      console.log(`POST /api/messages/${params.id}/reactions: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      return NextResponse.json({ error: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" }, { status: 404 });
    }

    message.reactions = message.reactions || [];
    const userCurrentReaction = message.reactions.find((r: Reaction) => r.users.includes(headerUserId));
    if (userCurrentReaction && userCurrentReaction.emoji === emoji) {
      // –£–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç emoji
      userCurrentReaction.users = userCurrentReaction.users.filter((id: string) => id !== headerUserId);
      if (userCurrentReaction.users.length === 0) {
        message.reactions = message.reactions.filter((r: Reaction) => r.users.length > 0);
      }
    } else {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
      if (userCurrentReaction) {
        userCurrentReaction.users = userCurrentReaction.users.filter((id: string) => id !== headerUserId);
        if (userCurrentReaction.users.length === 0) {
          message.reactions = message.reactions.filter((r: Reaction) => r.users.length > 0);
        }
      }
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
      const reactionIndex = message.reactions.findIndex((r: Reaction) => r.emoji === emoji);
      if (reactionIndex === -1) {
        message.reactions.push({ emoji, users: [headerUserId] });
      } else {
        message.reactions[reactionIndex].users.push(headerUserId);
      }
    }

    await message.save();

    console.log(`POST /api/messages/${params.id}/reactions: –†–µ–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è`, params.id);
    console.timeEnd(`POST /api/messages/${params.id}/reactions: Total`);
    return NextResponse.json({
      _id: message._id.toString(),
      reactions: message.reactions,
    }, { status: 200 });
  } catch (error: any) {
    console.error(`POST /api/messages/${params.id}/reactions: –û—à–∏–±–∫–∞:`, error.message, error);
    console.timeEnd(`POST /api/messages/${params.id}/reactions: Total`);
    return NextResponse.json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é", details: error.message }, { status: 500 });
  }
}